using System;
using System.Linq;
using System.Collections.Generic;

namespace FirstApp
{
    abstract class Delivery
    {
        public string Address;
    }

    class HomeDelivery : Delivery
    {
        public HomeDelivery(string address)
        {
            Address = address;
        }
    }

    class PickPointDelivery : Delivery
    {
        public PickPointDelivery()
        {
            Address = "PickPoint";
        }
    }

    class ShopDelivery : Delivery
    {
        public ShopDelivery()
        {
            Address = "Shop";
        }
    }
    abstract class Product
    {
        public string Type;
        public string Description;

        public void ShowInfo()
        {
            Console.WriteLine($"Тип продукта - {Type}\nОписание продукта - {Description}");
        }
    }
    class Food : Product
    {
        public Food()
        {
            Description = "Это можно съесть, приятного аппетита";
            Type = "Еда";
        }
    }
    class Furniture : Product
    {
        public Furniture()
        {
            Description = "Этим можно обустроить жилище";
            Type = "Мебель";
        }
    }
    class Clothes : Product
    {
        public Clothes()
        {
            Description = "Это можно надеть";
            Type = "Одежда";
        }
    }
    class Electronics : Product
    {
        public Electronics()
        {
            Description = "Это питается от электричества";
            Type = "Электроника";
        }

    }
    class User
    {
        public List<string> Orders;
        public string Name;

        public User(string name)
        {
            Name = name;
        }
        public void AddOrder()
        {
            Console.WriteLine("Выберите вариант доставки:\n1 - Домой\n2 - В пункт выдачи\n3 - В магазин");

            switch (Console.ReadLine())
            {
                case "1":
                    Orders.Add(new Order<HomeDelivery>($"{Name}-{Orders?.Count + 1}").Id);
                    break;
                case "2":
                    Orders.Add(new Order<PickPointDelivery>($"{Name}-{Orders?.Count + 1}").Id);
                    break;
                case "3":
                    Orders.Add(new Order<ShopDelivery>($"{Name}-{Orders?.Count + 1}").Id);
                    break;
            }
        }
        public void ShowOrders()
        {
            foreach (var order in Orders)
            {
                Console.WriteLine(order);
            }
        }
    }

    class Order<TDelivery> where TDelivery : Delivery
    {
        public TDelivery Delivery;
        public string Id;
        public List<Product> Products;

        public Order(string number)
        {
            FillOrder();
            Id = number;
            Products = new List<Product>();
        }
        public void FillOrder()
        {
            bool isFull = false;

            while (!isFull)
            {
                Console.WriteLine("1 - Добавить в заказ позицию\n2 - Удалить из заказа позицию\n3 - Подтвердить заказ");

                switch (Console.ReadLine())
                {
                    case "1":
                        AddPosition();
                        break;
                    case "2":
                        Console.WriteLine("Введите номер позиции, которую вы хотите удалить");
                        int index = 0;
                        Products.RemoveAt(GetIndex(index));
                        break;
                    case "3":
                        isFull = true;
                        break;
                }
            }
        }
        private int GetIndex(int index)
        {
            bool isCorrect = false;

            while (!isCorrect)
            {
                if (Int32.TryParse(Console.ReadLine(), out int result) && result > 0 && result <= Products.Count)
                {
                    index = result;
                    isCorrect = true;
                }
            }
            return index - 1;
        }
        private void AddPosition()
        {
            Console.WriteLine("1 - Добавить еду\n2 - Добавить мебель\n3 - Добавить одежду\n4 - Добавить электронику");

            switch (Console.ReadLine())
            {
                case "1":
                    Products.Add(new Food());
                    break;
                case "2":
                    Products.Add(new Furniture());
                    break;
                case "3":
                    Products.Add(new Clothes());
                    break;
                case "4":
                    Products.Add(new Electronics());
                    break;
            }
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            User user = new User("Savva");
            user.AddOrder();
            user.ShowOrders();

        }
    }
}
